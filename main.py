import telebot
from random import shuffle
from telebot import types
import pymorphy2

from config import TOKEN

bot = telebot.TeleBot(TOKEN)
morph = pymorphy2.MorphAnalyzer()
word = morph.parse('–≤–æ–ø—Ä–æ—Å')[0]


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item1 = types.KeyboardButton('üéì –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
    item2 = types.KeyboardButton('üí¨ –î–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    item3 = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã\n'
                                      f'–í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ —Ç–µ–º—É *–î–µ–Ω—å –ö–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏* üöÄ\n'
                                      f'–í –Ω—ë–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è {len(items)} {word.make_agree_with_number(len(items)).word}'
                                      f'\n\n\n_–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è IT-Fest Chita 2022_', reply_markup=markup,
                     parse_mode='Markdown')


@bot.message_handler(commands=['main'])
def main(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item1 = types.KeyboardButton('üéì –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
    item2 = types.KeyboardButton('üí¨ –î–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    item3 = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, f'–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üòé', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_user_text(message):
    if message.text == 'üéì –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ':
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton('üëç –î–∞', callback_data='yes_q')
        item2 = types.InlineKeyboardButton('üëé –ù–µ—Ç', callback_data='no')
        markup.add(item1, item2)
        bot.send_message(message.chat.id,
                         f'–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üìñ\n–¢–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –î–µ–Ω—å –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏ üë©‚ÄçüöÄ\n\n '
                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(items)}\n\n\n\n–í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µü§®?',
                         reply_markup=markup)

    elif message.text == 'üí¨ –î–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        bot.send_message(message.chat.id, f'–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Ç–µ–º—É'
                                          f' *–î–µ–Ω—å –ö–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏* üöÄ\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(items)}',
                         parse_mode='Markdown')

    elif message.text == '‚ùì –ü–æ–º–æ—â—å':
        bot.send_message(message.chat.id, f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ google.com')

    elif message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç':
        users[message.chat.id] = {'num_question': 0, 'started': False, 'correct_answer': 0, 'wrong_answer': 0}
        bot.send_message(message.chat.id, f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–µ—Å—Ç')
        start(message)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global users
    try:
        if call.message:
            if call.data == 'yes_q':
                users[call.message.chat.id] = {'num_question': 0, 'started': True, 'correct_answer': 0,
                                               'wrong_answer': 0}

                markup = types.ReplyKeyboardRemove()

                bot.send_message(call.message.chat.id, f'–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã... üßê', reply_markup=markup)

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç'))

                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
                bot.send_message(call.message.chat.id, f'–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üîé', reply_markup=markup)

                shuffle(items[users[call.message.chat.id]['num_question']]['options'])
                a, b, c, d = [x for x in items[users[call.message.chat.id]['num_question']]['options']]

                markup2 = types.InlineKeyboardMarkup(row_width=2)
                markup2.add(types.InlineKeyboardButton(text=f'1Ô∏è‚É£ {a}', callback_data=f'{a}'),
                            types.InlineKeyboardButton(text=f'2Ô∏è‚É£ {b}', callback_data=f'{b}'),
                            types.InlineKeyboardButton(text=f'3Ô∏è‚É£ {c}', callback_data=f'{c}'),
                            types.InlineKeyboardButton(text=f'4Ô∏è‚É£ {d}', callback_data=f'{d}'))

                bot.send_message(call.message.chat.id,
                                 f'{users[call.message.chat.id]["num_question"] + 1} '
                                 f'–≤–æ–ø—Ä–æ—Å üìñ\n'
                                 f'\n*{items[users[call.message.chat.id]["num_question"]]["question"]}*',
                                 reply_markup=markup2, parse_mode='Markdown')

            elif call.data == 'no':
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –º—ã –ø–æ–¥–æ–∂–¥—ë–º üòÅ', reply_markup=None)
            elif call.data == 'no_q':
                bot.edit_message_text(message_id=call.message.id, chat_id=call.message.chat.id,
                                      text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Çü•≥\n'
                                           f'–í–æ—Ç –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n'
                                           f' ‚úÖ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ '
                                           f'{users[call.message.chat.id]["correct_answer"]} –∏–∑ {len(items)}\n'
                                           f' ‚ùå –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–ª—å–Ω–æ –Ω–∞ '
                                           f'{users[call.message.chat.id]["wrong_answer"]} –∏–∑ {len(items)}\n\n'
                                           f'–•–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è üòâ', reply_markup=None)
                main(call.message)

            else:

                if call.data == items[users[call.message.chat.id]["num_question"]]["answer"] and \
                        users[call.message.chat.id]['started']:
                    users[call.message.chat.id]['correct_answer'] += 1

                    users[call.message.chat.id]['num_question'] += 1

                    if users[call.message.chat.id]['num_question'] < len(items):
                        shuffle(items[users[call.message.chat.id]['num_question']]['options'])

                        a, b, c, d = [x for x in items[users[call.message.chat.id]['num_question']]['options']]

                        markup2 = types.InlineKeyboardMarkup(row_width=2)
                        markup2.add(types.InlineKeyboardButton(text=f'1Ô∏è‚É£ {a}', callback_data=f'{a}'),
                                    types.InlineKeyboardButton(text=f'2Ô∏è‚É£ {b}', callback_data=f'{b}'),
                                    types.InlineKeyboardButton(text=f'3Ô∏è‚É£ {c}', callback_data=f'{c}'),
                                    types.InlineKeyboardButton(text=f'4Ô∏è‚É£ {d}', callback_data=f'{d}'))

                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              text=f'{users[call.message.chat.id]["num_question"] + 1} '
                                                   f'–≤–æ–ø—Ä–æ—Å üìñ\n\n*'
                                                   f'{items[users[call.message.chat.id]["num_question"]]["question"]}*',
                                              reply_markup=markup2, parse_mode='Markdown')

                elif users[call.message.chat.id]['started']:

                    users[call.message.chat.id]['wrong_answer'] += 1

                    users[call.message.chat.id]['num_question'] += 1

                    if users[call.message.chat.id]['num_question'] < len(items):
                        shuffle(items[users[call.message.chat.id]['num_question']]['options'])

                        a, b, c, d = [x for x in items[users[call.message.chat.id]['num_question']]['options']]

                        markup2 = types.InlineKeyboardMarkup(row_width=2)
                        markup2.add(types.InlineKeyboardButton(text=f'1Ô∏è‚É£ {a}', callback_data=f'{a}'),
                                    types.InlineKeyboardButton(text=f'2Ô∏è‚É£ {b}', callback_data=f'{b}'),
                                    types.InlineKeyboardButton(text=f'3Ô∏è‚É£ {c}', callback_data=f'{c}'),
                                    types.InlineKeyboardButton(text=f'4Ô∏è‚É£ {d}', callback_data=f'{d}'))

                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              text=f'{users[call.message.chat.id]["num_question"] + 1} '
                                                   f'–≤–æ–ø—Ä–æ—Å üìñ\n\n*'
                                                   f'{items[users[call.message.chat.id]["num_question"]]["question"]}*',
                                              reply_markup=markup2, parse_mode='Markdown')

                if users[call.message.chat.id]["num_question"] == len(items) and users[call.message.chat.id]['started']:
                    users[call.message.chat.id]['started'] = False

                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('üëç –î–∞', callback_data='yes_q'),
                               types.InlineKeyboardButton('üëé –ù–µ—Ç', callback_data='no_q'))

                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Çü•≥\n'
                                               f'–í–æ—Ç –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n'
                                               f'‚úÖ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ '
                                               f'{users[call.message.chat.id]["correct_answer"]} –∏–∑ {len(items)}\n'
                                               f'‚ùå –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–ª—å–Ω–æ –Ω–∞ '
                                               f'{users[call.message.chat.id]["wrong_answer"]} –∏–∑ {len(items)}\n\n'
                                               f'–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ?', reply_markup=markup)
    except Exception as es:
        print(repr(es))


with open('question.txt', 'r', encoding='utf-8') as e:
    items = eval(e.read())
users = dict()
bot.infinity_polling()